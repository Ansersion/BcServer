package bc_server;

import org.apache.mina.core.buffer.IoBuffer;

/**
 * @author Ansersion
 * 
 */
public class BPPacket_CONNECT extends BPPacket {

	enum ParseVrbState {
		PARSE_STATE_1, PARSE_STATE_2;
	}

	ParseVrbState PrsVrbSt = ParseVrbState.PARSE_STATE_1;

	public BPPacket_CONNECT(FixedHeader fx_header) {
		super(fx_header);
	}

	public BPPacket_CONNECT() {
	}

	@Override
	public int Decrypt(EncryptType etEncryptType) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int parseFixedHeader() throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean parseVariableHeader(IoBuffer io_buf) throws Exception {
		// TODO Auto-generated method stub
		int client_id_len = 0;

		try {
			// level(1 byte) + flags(1 byte) + client ID length(1 byte)
			byte encoded_byte = 0;
			encoded_byte = (byte) io_buf.getChar();
			super.parseVrbHeadLevel(encoded_byte);

			encoded_byte = (byte) io_buf.getChar();
			super.parseVrbHeadFlags(encoded_byte);

			encoded_byte = (byte) io_buf.getChar();
			client_id_len = super.parseVrbClientIdLen(encoded_byte);

			// client ID(client_id_len byte) + alive time(2 byte) + timeout(1
			// byte)
			byte[] id = new byte[client_id_len];
			for (int i = 0; i < client_id_len; i++) {
				id[i] = (byte) io_buf.getChar();
			}
			super.parseVrbClientId(id, client_id_len);

			byte alive_time_msb = (byte) io_buf.getChar();
			byte alive_time_lsb = (byte) io_buf.getChar();
			super.parseVrbAliveTime(alive_time_msb, alive_time_lsb);

			byte timeout = (byte) io_buf.getChar();
			super.parseVrbTimeout(timeout);
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}

		return true;
	}
	
	@Override
	public boolean parseVariableHeader(byte[] buf) throws Exception {
		// TODO Auto-generated method stub
		int counter = 0;
		int client_id_len = 0;

		try {
			// level(1 byte) + flags(1 byte) + client ID length(1 byte)
			byte encoded_byte = 0;
			encoded_byte = buf[counter++];
			super.parseVrbHeadLevel(encoded_byte);

			encoded_byte = buf[counter++];
			super.parseVrbHeadFlags(encoded_byte);

			encoded_byte = buf[counter++];
			client_id_len = super.parseVrbClientIdLen(encoded_byte);

			// client ID(client_id_len byte) + alive time(2 byte) + timeout(1
			// byte)
			byte[] id = new byte[client_id_len];
			for (int i = 0; i < client_id_len; i++) {
				id[i] = buf[counter++];
			}
			super.parseVrbClientId(id, client_id_len);

			byte alive_time_msb = buf[counter++];
			byte alive_time_lsb = buf[counter++];
			super.parseVrbAliveTime(alive_time_msb, alive_time_lsb);

			byte timeout = buf[counter++];
			super.parseVrbTimeout(timeout);
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}

		return true;
	}
	
	/*
	@Override
	public boolean parseVariableHeader() throws Exception {
		// TODO Auto-generated method stub
		// return parseVariableHeader();
		return false;
	}
	*/

	@Override
	public int parsePayload() throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean checkCRC(CrcChecksum ctCrc) throws Exception {
		// TODO Auto-generated method stub
		return false;
	}

}
