package bc_server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.ServerSocketChannel;
import java.nio.charset.Charset;
 
import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class BcServerMain {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        //socket接收器
    	NioSocketBcAcceptor BcAcceptor = new NioSocketBcAcceptor();
 
        //添加日志记录
        BcAcceptor.getFilterChain().addLast("logger",new LoggingFilter());
        //添加编码解码器
        // BcAcceptor.getFilterChain().addLast("codec",new ProtocolCodecFilter(new TextLineCodecFactory()));
        // BcAcceptor.getFilterChain().addLast("mycoder", new ProtocolCodecFilter(new ByteArrayCodecFactory()));
        //添加处理器(用于接收数据后处理处理数据逻辑)
        BcAcceptor.setHandler( new TimeServerHandler());
        
        BcAcceptor.setReuseAddress(true);
        
        //设置读取数据缓存单位byte 
        BcAcceptor.getSessionConfig().setReadBufferSize(2048 );
        //设置多长时间后接收器开始空闲
        BcAcceptor.getSessionConfig().setIdleTime(
 IdleStatus.BOTH_IDLE, 10 );
        try {
            //绑定某个端口，作为数据入口 
            BcAcceptor.bind(new InetSocketAddress(PORT));
        }catch (IOException e) {
            e.printStackTrace();
        }

	}

}
