/**
 * 
 */
package bc_server;

/**
 * @author Ansersion
 *
 */
public class BPPacket_DISCONN extends BPPacket {

	@Override
	public boolean parseVariableHeader(IoBuffer io_buf) throws Exception {
		// TODO Auto-generated method stub
		int client_id_len = 0;
		
	
		try {
			byte encoded_byte = 0;
			client_id_len = 2;
	
			byte[] id = new byte[client_id_len];
			for (int i = 0; i < client_id_len; i++) {
				id[i] = (byte) io_buf.get();
			}
			super.parseVrbClientId(id, client_id_len);
	
			PackSeq = io_buf.getUnsignedShort();
			
			encoded_byte = io_buf.get();
			super.parseVrbHeadFlags(encoded_byte);
	
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	
		return true;
	}
	
	@Override
	public boolean parseVariableHeader(byte[] buf) throws Exception {
		// TODO Auto-generated method stub
		try {
			int counter = 0;

			byte client_id_msb = buf[counter++];
			byte client_id_lsb = buf[counter++];
			super.getVrbHeader().parseClientId(client_id_msb, client_id_lsb);

		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	
		return true;
	}
	
	@Override
	public boolean parsePayload(byte[] buf) throws Exception {
		// TODO Auto-generated method stub
		
		try {
			int counter = 0;
			byte encoded_byte = 0;
			
			DeviceNum = buf[counter++];
			DevSigData = new DeviceSignalData(DeviceNum);
			
			counter += DevSigData.parseSigMap(buf, counter);
	
		} catch (Exception e) {
			System.out.println("Error: parsePayload error");
			e.printStackTrace();
			throw e;
		}
	
		return true;
	}

}
